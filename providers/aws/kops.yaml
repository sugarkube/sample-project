# Defaults for all kops clusters. Values here are suitable for prod because it's
# safer to do that than to forget to update the prod config with bigger
# instances, number of masters/nodes, etc.
kops_state_bucket: "{{ .state_bucket }}"

kube_context: "{{ .cluster_name }}"
cluster_name: "{{ .stack.cluster }}.{{ .stack.region }}.{{ .root_hosted_zone }}"
cluster_hosted_zone: "{{ .cluster_name }}"

state_bucket: "state.{{ .cluster_name }}"     # a single state bucket for kops & terraform remote state

provisioner:
  bastion_user: core    # user name for setting up an SSH connection to the bastion
  ssh_private_key: ~/.ssh/sugarkube-example     # see the tutorial for generating this

  params:       # parameters to different kops commands
    global:     # these are applied to all commands
      name: "{{ .cluster_name }}"
      state: "s3://{{ .kops_state_bucket }}"

    create_cluster:       # Parameters for the `kops create cluster` command
      cloud: aws
      bastion: true
      ssh_public_key: ~/.ssh/sugarkube-example.pub     # see the tutorial for generating this
      api_loadbalancer_type: internal   # More kops settings. Underscores in keys
      dns: private                      # will be converted to hyphens and prepended
      authorization: RBAC               # with '--' to turn them into CLI args
      networking: calico
      encrypt_etcd_storage:      # boolean flag
      topology: private
      master_count: 3         # settings for production-quality clusters. Dev clusters override this
      master_size: t3a.medium
      node_count: 2
      node_size: t3a.medium
      master-zones: |-      # automatically set the zones based on the number of masters
        {{- if eq .provisioner.params.create_cluster.master_count 1 }}
          {{ .stack.region }}a
        {{ else }}
          {{ .stack.region }}a,{{ .stack.region }}b,{{ .stack.region }}c
        {{ end }}
      zones:  |-      # automatically set the zones based on the number of nodes
        {{- if eq .provisioner.params.create_cluster.node_count 1 }}
          {{ .stack.region }}a
        {{ else if eq .provisioner.params.create_cluster.node_count 2 }}
          {{ .stack.region }}a,{{ .stack.region }}b
        {{ else }}
          {{ .stack.region }}a,{{ .stack.region }}b,{{ .stack.region }}c
        {{ end }}

    rolling_update:
      node_interval: 4m0s

  specs:                              # The kops config will be downloaded and this
    cluster:                          # will be patched into the spec before
      docker:                         # applying it to update the cluster config.
        logLevel: warn                # This allows kops clusters to be fully
        logOpt:                       # customised and updated automatically.
          - max-size=10m
          - max-file=5
        logDriver: json-file
        ipMasq: true
        ipTables: true
    instanceGroups:
      nodes:                    # name of the instance group
        nodeLabels:
          sugarkube: "true"
        cloudLabels:
          project: sugarkube-demo
        maxSize: 1          # change these then run `sugarkube cluster update -n aws-dev -s examples/stacks.yaml`
        minSize: 1          # and watch the config changes take effect
