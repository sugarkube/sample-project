defaults: &defaults
  provider_vars_dirs:   # YAML files under here will be recursively merged. Used to configure
    - ../providers/  # providers. Errors will be thrown if expected dirs don't exist.
  kapp_vars_dirs:       # The values in YAML files in these directories will be recursively merged
    - ../kapp-vars/    # into a single map/dict. The resulting values can be used to template
    # files for kapps, or kapps can declare that they need them set as
    # parameters/env vars in their `sugarkube.yaml` file.
  template_dirs:
    - ../templates/    # Source template file directories. Manifests can refer to files in these
    # directories to write templated files into kapps to parameterise them by
    # cluster/provider/profile, etc.

local-web:        # a local stack for web development
  <<: *defaults
  cluster: standard
  provider: local
  provisioner: minikube
  profile: minikube
  manifests:        # Manifests are executed by running `sugarkube kapps apply`
    # todo - support pulling these from git repos
    - uri: ../manifests/web/bootstrap.yaml
    - uri: ../manifests/web/wordpress-sites.yaml
      id: wordpress       # explicitly set the manifest ID. Will be used as a prefix to generate kapp IDs.
      overrides:
        site2:
          conditions:
          - false             # explicitly disable this site just to show we've got control at this level over what's installed

dev-web:
  <<: *defaults
  cluster: devweb1
  provider: aws
  account: dev
  profile: dev
  provisioner: eks
  region: eu-west-2
  manifests:
    - uri: ../manifests/web/prelaunch.yaml
    - uri: ../manifests/web/bootstrap.yaml
    - uri: ../manifests/web/shared-data.yaml      # we'll create an RDS database for each wordpress site
    - uri: ../manifests/web/wordpress-sites.yaml
      id: wordpress         # explicitly set the manifest ID.

# To go to production we should have 2 stacks, one for stateful resources or things that are slow/difficult to create
# (e.g. databases, cloudfront distributions, a public hosted zone etc.), and one for the ephemeral k8s cluster running
# applications. The former would only be executed periodically. E.g.:

#prod-resources:
#  <<: *defaults
#  cluster: prodresources
#  provider: aws
#  account: prod
#  profile: prod
#  provisioner: none          # no need for a provisioner since we aren't creating a cluster
#  region: eu-west-2
#  manifests:
#    - uri: ../manifests/web/shared-data.yaml         # just create the databases

# The above would give us some credentials and hostnames for the 2 databases. One approach for passing them through to
# ephemeral clusters would be to override the variables in this stack config file using `overrides` blocks as
# demonstrated below:

#prod-web:
#  <<: *defaults
#  cluster: prodweb1
#  provider: aws
#  account: prod
#  profile: prod
#  provisioner: eks
#  region: eu-west-2
#  manifests:
#    - uri: ../manifests/web/prelaunch.yaml
#    - uri: ../manifests/web/bootstrap.yaml
#    - uri: ../manifests/web/wordpress-sites.yaml       # Note: in this manifest there's a condition that wordpress only
#      id: wordpress                                    # depends on the RDS DBs when using the dev profile
#      overrides:
#        site1:
#          vars:
#            db_host: site1.db.example.amazonaws.com
#            db_user: wordpress1
#            db_password:                    # this should come from a secure password store, accessed by a script/terraform
#            db_name: wordpress
#        site2:
#          vars:
#            db_host: site2.db.example.amazonaws.com
#            db_user: wordpress2
#            db_password:                    # this should come from a secure password store, accessed by a script/terraform
#            db_name: wordpress
